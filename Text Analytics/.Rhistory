source('~/.active-rstudio-document', echo=TRUE)
plot(a)
median(a)
sigma(a)
summary(a)
sd(a)
b=(sd(a)^2)
b
sd(c)
sd(c)
cv=(5/15)*100
cv
pnorm(q=50,mean = 75,sd=15,lower.tail = T)
qnorm(p=50,mean = 75,sd=15,lower.tail = T)
qnorm(p=50,mean = 75,sd=15,lower.tail = F)
pnorm(q=50,mean = 75,sd=15,lower.tail = T)
pnorm(q=50,mean = 70,sd=15,lower.tail = T)
qnorm(q=50,mean = 70,sd=15,lower.tail = T)
qnorm(p = 50,mean = 70,sd=15,lower.tail = T)
qnorm(p = 0.50,mean = 70,sd=15,lower.tail = T)
install.packages("openxl")
install.packages("openxlsx")
a=c(60,63,87,45,92,71,56,87,97,69,90,87,74)
mean(a)
mode(a)
plot(a)
median(a)
sigma(a)
summary(a)
sd(a)
b=(sd(a)^2)
sd(x)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(x)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(x)
result<-getmode(x)
result
sigma(a)
sigma(a)
sd(a)
sqrt(sd(a))
b=(sd(a)^2)
b
c=25
sd(c)
cv=(5/15)*100
cv
data(trees)
trees<-data(trees)
View(trees)
trees<-datasets::trees
trees
summary(trees)
n=length(girth)
n=length(trees$Girth)
sd(trees$Girth)
sigma=sd(trees$Girth)
SEmean=sigma/sqrt(n)
SEmean
E=qnorm(0.975)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
a=c(60,63,87,45,92,71,56,87,97,69,90,87,74)
mean(a)
75.23
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(x)
median(a)
b=(sd(a)^2)
b
c=25
sd(c)
cv=(5/15)*100
cv
u=70
sigma=15
p=50
z=(p-u)/sigma
z
(70-50)/15
c= c&s/s
c
0.0125/0.125
c&s = 0.0125
s=0.125
c= c&s/s
c
0.25/0.16
1/3
(4/52)+(4/51)+(4/50)
z.value=xbar-mu0/n
xbar=5516
mu0=5423
sd=979
n=352
z.value=xbar-mu0/n
z.value
z.value=(xbar-mu0)/n
z.value
xbar=5516
mu0=5423
sigma=979
z=(xbar-mu0)/(sigma/sqrt(n))
z
alpha=0.05
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
pval=pnorm(z)
pval    ## lower tail p value
trees<-datasets::trees
trees
summary(trees)
n=length(trees$Girth)
sigma=sd(trees$Girth)
SEmean=sigma/sqrt(n)
SEmean
E=qnorm(0.975)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
median(a)
(50-70)/15
-20/15
pnorm(50,70,15)
pnorm(50,70,15 lower.tail = 50)
pnorm(50,70,15 lower.tail = 50)
pnorm(50,70,15, lower.tail = 50)
pnorm(50,70,15, lower.tail = T)
qnorm(50,70,15, lower.tail = T)
?pnorm
pnorm(q=50,mean=70,sd=15, lower.tail = T)
library(MASS)
height.response=na.omit(survey$Height)
l=length(height.response)
s=sd(height.response)   ## sample standard deviation
SE=s/sqrt(l)     ## standard error
SE
ME=qt(0.975,l-1)   ## margin of error
ME
xbar=mean(height.response)  ## sample mean
xbar+c(-ME,ME)
xbar=5516
mu0=5423
sigma=979
n=352
z=(xbar-mu0)/(sigma/sqrt(n))
z ##1.78
alpha=0.05
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
pval=pnorm(z)
pval  #0.9626  ## lower tail p value
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
xbar=9900  ## sample mean
mu0=10000 ## Hypothesized value
sigma=120 ##population standard deviation
n=30      ##sample size
z=(xbar-mu0)/(sigma/sqrt(n))
z
alpha=0.05
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
pval=pnorm(z)
pval    ## lower tail p value
2.505166e-06 > 0.05
2.505166e-06 < 0.05
xbar=2.1
mu0=2
n=35
sigma=0.25
alpha=0.05
z=(xbar-mu0)/(sigma/sqrt(n))
z  ## test statistic
z.alpha=qnorm(1-alpha)
-z.alpha
pval=pnorm(z,lower.tail = F)
pval  ## upper tail value
0.008980239 < 0.05
pval  #0.9626  ## lower tail p value
xbar=5516
mu0=5423
sigma=979
n=352
z=(xbar-mu0)/(sigma/sqrt(n))
z ##1.78
alpha=0.05
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
pval=pnorm(z)
pval  #0.9626  ## lower tail p value
0.9626468 > 0.05
xbar=14.6
mu0=15.6
n=35
sigma=2.5
z=(xbar-mu0)/(sigma/sqrt(n))
z  ## test statistic
alpha=0.05
z.half.alpha=qnorm(1-alpha/2)
c(-z.half.alpha,z.half.alpha)
pval=2*pnorm(z)
pval  ## Lower tail value
0.01796048 > 0.05
xbar=9900
mu0=10000
n=30
sigma=125
alpha=0.05
z=(xbar-mu0)/(sigma/sqrt(n))
z
alpha=0.05
t.alpha=qt(1-alpha,df=n-1)
-t.alpha
t.alpha=qnorm(1-alpha)
t.aplha
t.alpha
-t.alpha
pval=pt(z,df=n-1)
pval # lower tail p value
z= (xbar-p0)/(sqrt(p0*(1-p0)/n))
xbar= 85/148
p0=0.6
n=148
z= (xbar-p0)/(sqrt(p0*(1-p0)/n))
z
z.alpha= qnorm(1-alpha)
-z.alpha
pval=pnorm(z)
pval
0.2618676 > 0.05
pnorn(50,70,15, lower tail=T)
pnorm(50,70,15, lower tail=T)
pnorm(50,70,15 lower tail=T)
pnorm(70,50,15 lower tail=T)
pnorm(50,70,12)
pnorm(50,70,12 lower.tail = T)
x=50
mean=70
sd= 15
pnorm(q=50,mean=70,sd=15, lower.tail = T)
z= (x-mean)/sd
z
qnorm(0.001)
alpha=0.001
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
qnorm(0.001)
z=qnorm(0.001)
z
?t.test
a=c(60,63,87,45,92,71,56,87,97,69,90,87,74)
mean(a)
75.23
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(x)
result<-getmode(x)
result
median(a)
b=(sd(a)^2)
b
c=25
sd(c)
cv=(5/15)*100
x=50
mean=70
sd= 15
z= (x-mean)/sd
z
0.0125/0.125 =0.1
xbar=5516
mu0=5423
sigma=979
n=352
z=(xbar-mu0)/(sigma/sqrt(n))
z ##1.78
alpha=0.05
z.alpha=qnorm(1-alpha)
-z.alpha  ## Critical value
pval=pnorm(z)
pval  #0.9626  ## lower tail p value
[1] TRUE
xbar=5516
mu0=5423
sigma=979
n=352
trees<-datasets::trees
trees<-datasets::trees
trees
summary(trees)
n=length(trees$Girth)
sigma=sd(trees$Girth)
SEmean=sigma/sqrt(n)
SEmean
E=qnorm(0.975)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
datasets::trees
l=length(trees$Girth)
trees<-datasets::trees
n=31
sd=sd(length(trees$Girth))
sd
sigma=sd(length(trees$Girth))
sd
n=length(trees$Girth)
sigma=sd(trees$Girth)
SEmean=sigma/sqrt(n)
SEmean
E=qnorm(0.975)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
E=qnorm(0.05)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
trees<-datasets::trees
trees
summary(trees)
n=length(trees$Girth)
sigma=sd(trees$Girth)
SEmean=sigma/sqrt(n)
SEmean
E=qnorm(0.05)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
E=qnorm(0.05)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
xbar=mean(trees$Girth)
n=length(trees$Girth)
sigma=sd(trees$Girth)
SEmean=sigma/sqrt(n)
SEmean
E=qnorm(0.05)*SEmean
E
xbar=mean(trees$Girth)
xbar+ c(E,-E)
xbar=mean(trees$Girth)
xbar+ c(E,-E)
library(openxlsx)
xbar=mean(trees$Girth)
getwd()
read.xlsx("FORMULA")
read.xlsx("FORMULA.xlxs")
read.xlsx("LOG.xlxs")
list.files()
read.xlsx("FORMULAS.xlsx")
read.xlsx("FORMULAS.xlsx",sheet="IF")
library(openxlsx)
getwd()
list.files()
read.xlsx("FORMULAS.xlsx",sheet="IF")
list.files()
?bison
install.packages(MongoDB)
?mass
?MASS
install.packages("MASS")
gtwd()
getwd()
list.files()
read.csv("house-rents.csv")
model= lm(rentalrates~age+expense+vac_rate+squarefeet+loc)
model= lm(rentalrates~age+expense+vac_rate+squarefeet+loc)
summary(model)
model= lm(rentalrates ~age+ expenses+ vac_rate+ squarefeet+ loc)
hr=read.csv("house-rents.csv")
model= lm(rentalrates ~age+ expenses+ vac_rate+ squarefeet+ loc)
summary(model)
model= lm(rentalrates~age+expenses+vac_rate+ squarefeet+ loc)
model1=lm(rentalrates~)
model1=lm(rentalrates~*)
library(rattle)
rattle()
hr=read.csv("house-rents.csv")
model<- lm(rentalrates~age+expenses+vac_rate+ squarefeet+ loc)
summary(model)
model<- lm(rentalrates~age+expenses+vac_rate+squarefeet+loc)
summary(model)
names(hr)
model <- lm(rentalrates~age+expenses+vac_rate+squarefeet+loc)
summary(model)
model <- lm("rentalrates~age+expenses+vac_rate+squarefeet+loc")
summary(model)
model <- lm(rentalrates~age+expenses+vac_rate+squarefeet+loc,hr)
summary(model)
getwd()
list.files()
library(xlsx)
read.xlsx("INTERSECT NAMES.xlsx")
common<-read.csv("INTERSECT NAMES.csv")
View(hr)
View(common)
x<-common$X1
y<-common$X2
z<-common$X3
x %in% y
x %in% y %in% z
x[x %in% y %in% z]
View(common)
names<-intersect(x,y,z)
names<-intersect(intersect(x,y),z)
write.csv(names,"names.csv")
common<-read.csv("INTERSECT NAMES.csv")
x<-common$X1
y<-common$X2
z<-common$X3
x[x %in% y %in% z]
u<-common$X4
v<-common$X5
w<-common$X6
s<-common$X7
View(common)
intersect(u,u)
same<-intersect(u,u)
write.csv(same,"same.csv")
common<-read.csv("INTERSECT NAMES.csv")
x<-common$X1
y<-common$X2
z<-common$X3
u<-common$X4
v<-common$X5
w<-common$X6
s<-common$X7
t<-common$X8
same<-intersect(u,u)
intersect(u,u)
plot(names)
scatterplot(names)
hist(names)
x %in% y
x %in% y %in% z %in% u %in% v %in% w %in% s %in% t
s %in% t
w %in% s %in% t
v %in% w
v %in% w
x7<-intersect(w,s)
intersect(w,s)
x7<-intersect(intersect(w,s),t)
intersect(intersect(w,s),t)
x %in% t
x[x %in% t]
duplicated(x)
common<-read.csv("INTERSECT NAMES.csv")
x<-common$X1
common<-read.csv("INTERSECT NAMES.csv")
x<-common$X1
duplicated(x)
which(duplicated(x))
which(duplicated(t))
t<-vector(t)
t<-common$X8
which(duplicated(t))
duplicated(t)
setwd("D:/Practice/Time Series")
getwd()
list.files()
setwd("D:/Practice/Text Analytics")
list.files()
getwd()
list.files()
+# Install all required packages.
+install.packages(c("ggplot2", "e1071", "caret", "quanteda",
+                   "irlba", "randomForest"))
+
+
+
+
+# Load up the .CSV data and explore in RStudio.
+spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE, fileEncoding = "UTF-16")
+View(spam.raw)
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE, fileEncoding = "UTF-16")
+# Install all required packages.
install.packages(c("ggplot2", "e1071", "caret", "quanteda",
+                   "irlba", "randomForest"))
+# Install all required packages.
install.packages(c("ggplot2", "e1071", "caret", "quanteda","irlba", "randomForest"))
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE, fileEncoding = "UTF-16")
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE, fileEncoding = "UTF-16")
View(spam.raw)
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE)
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE)
getwd()
list.files()
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE)
View(spam.raw)
+# Clean up the data frame and view our handiwork.
spam.raw <- spam.raw[, 1:2]
names(spam.raw) <- c("Label", "Text")
spam.raw <- spam.raw[, 1:2]
names(spam.raw) <- c("Label", "Text")
View(spam.raw)
length(which(!complete.cases(spam.raw)))
