install.packages("rattle")
library(rattle)
library("rattle", lib.loc="~/R/win-library/3.3")
install.packages("rattle", dep=c("Suggests"))
library("rattle", lib.loc="~/R/win-library/3.3")
library(rattle)
rattle()
install.packages("rattle")
library("rattle", lib.loc="~/R/win-library/3.3")
install.packages("rattle", dep=c("Suggests"))
library("RGtk2", lib.loc="~/R/win-library/3.4")
library(rattle)
rattle()
emp.data<- data.frame(emp.id= c(1:5),
emp_name = c("rick","dane","sam","om","ryan"),
salary=c(623.3,515.2,611.0,729.0,843.25),
start_date=as.Date(c("2012-01-01", "2013-09-23",2014-11-15,"2014-05-11","2015-03-27")),stringsAsFactors = FALSE)
print(emp.data)
emp.data<- data.frame(emp.id= c(1:5),
emp_name = c("rick","dane","sam","om","ryan"),
salary=c(623.3,515.2,611.0,729.0,843.25),
start_date=as.Date(c("2012-01-01", "2013-09-23","2014-11-15","2014-05-11","2015-03-27")),stringsAsFactors = FALSE)
print(emp.data)
str(emp.data)
print(summary(emp.data))
result<- data.frame(emp.data$emp_name,emp.data$salary)
result
result<- emp.data[1:2,]
result
emp.data$dept <- c("IT", "operations","HR","Finance")
v<- emp.data
v
emp.data$dept <- c("IT", "operations","HR","Finance")
v<- emp.data
v
emp.data$dept <- c("IT", "operations","HR","Finance","IT")
v<- emp.data
v
emp.newdata <- data.frame(emp.id=c(6:8),
emp_name=c("Rashmi","Pranab","Tushar"),
salary=c(578.0,722.5,632.8),
salary_date= as.Date(c("2013-05-21","2013-07-30", "2014-06-17")),
dept= c("IT","Operations","Finance"),
stringsAsFactors = FALSE)
emp.finaldata<- c(emp.data,emp.newdata)
emp.finaldata
emp.finaldata<- rbind(emp.data,emp.newdata)
emp.finaldata
emp.newdata <- data.frame(emp.id=c(6:8),
emp_name=c("Rashmi","Pranab","Tushar"),
salary=c(578.0,722.5,632.8),
start_date= as.Date(c("2013-05-21","2013-07-30", "2014-06-17")),
dept= c("IT","Operations","Finance"),
stringsAsFactors = FALSE)
emp.finaldata<- rbind(emp.data,emp.newdata)
emp.finaldata
str(data)
data1<-data[,c(2,9,10,12,13,14)]
getwd()
sal<-max(emp.finaldata)
sal<-max(emp.finaldata$salary)
sal
retval<- subset(emp.finaldata,salary == max(salary))
retval
retval<- subset(emp.finaldata, dept == "IT")
retval
info<- subset(emp.finaldata,salary > 600 & dept == "IT")
info
retval<- subset(emp.finaldata,as.Date(start_date)> as.Date("2014-01-01")
retval<- subset(emp.finaldata,as.Date(start_date)> as.Date("2014-01-01"))
retval
retval<- subset(emp.finaldata,as.Date(start_date)> as.Date("2014-01-01"))
retval
x<- c(21,62,10,53)
labels<- c("London","New York", "Singapore", "Mumbai")
png(file="city.jpg")
pie(x,labels)
pie(x,labels)
dev.off()
x<- c(21,62,10,53)
labels<- c("London","New York", "Singapore", "Mumbai")
png(file="city.jpg")
pie(x,labels)
dev.off()
H<- C(7,12,28,,3,41)
H<- c(7,12,28,,3,41)
H<- c(7,12,28,3,41)
png(file="barchart.png")
barplot(H)
png(file="barchart.jpg")
barplot(H)
hist(H)
library("caret", lib.loc="~/R/win-library/3.4")
library("car", lib.loc="~/R/win-library/3.4")
install.packages("car")
library("car", lib.loc="~/R/win-library/3.4")
barplot(H)
dev.off()
dev.off()
dev.off()
sessionInfo()
plot(data)
.libPaths()
x<- C(12,7,3,4.2,18,2,54,-21,8,-5)
x<- c(12,7,3,4.2,18,2,54,-21,8,-5)
result.mean<- mean(x)
result.mean
result.mean<- mean(x,trim = 0.3)
result.mean
x<- c(12,7,3,4.2,18,2,54,-21,8,-5,NA)
result.mean<- mean(x,na.rm = TRUE)
result.mean
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(relation)
(summary(relation))
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
plot(y,x,col="red",main = "Height vs Weight",abline (lm(x~y)),xlab = "weight in kg",ylab="height in cm")
print(head(input))
input <- mtcars[,c("mpg","disp","hp","wt")]
print(head(input))
model<- lm(mpg,.,data=input)
model<- lm(mpg~.,data=input)
summary(model)
summary(model)
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
Xdisp <- coef(model)[2]
Xhp <- coef(model)[3]
Xwt <- coef(model)[4]
print(Xdisp)
print(Xhp)
print(Xwt)
y=37.10551+Xdisp.x1+Xhp.x2+Xwt.x3
y=37.10551+(-0.0009370091)*x1+(-0.03115655)*x2+(-3.800891)*x3
y=37.10551+(-0.0009370091)*221+(-0.03115655)*102+(-3.800891)*2.91
y
mtcars
input <- mtcars[,c("am","cyl","hp","wt")]
print(head(input))
am.data<- glm(am~.,family="binomial")
am.data<- glm(am~.,family="binomial",data=input)
summary(am.data)
input <- mtcars[,c("am","cyl","hp","wt")]
am.data = glm(formula = am ~ cyl + hp + wt, data = input, family = binomial)
print(summary(am.data))
# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
x <- seq(-10, 10, by = .1)
# Choose the mean as 2.5 and standard deviation as 0.5.
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(y)
# Create a sequence of numbers between -10 and 10 incrementing by 0.2.
x <- seq(-10,10,by = .2)
# Choose the mean as 2.5 and standard deviation as 2.
z <- pnorm(x, mean = 2.5, sd = 2)
plot(x)
y <- pnorm(x, mean = 2.5, sd = 2)
plot(x,y)
plot(x,y)
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
y <- pnorm(x, mean = 2.5, sd = 2)
plot(x,y)
x <- seq(0, 1, by = 0.02)
# Choose the mean as 2 and standard deviation as 3.
y <- qnorm(x, mean = 2, sd = 1)
plot(x,y)
hist(y, main = "Normal DIstribution")
hist(y, main = "Normal DIstribution",col="blue")
hist(y, main = "Normal DIstribution",col="blue")
lpot(x,y)
plot(x,y)
y <- dbinom(x,50,0.5) #dbinom(x, size, prob)
plot(x,y)
y <- dbinom(x,50,0.5) # Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5) #dbinom(x, size, prob)
plot(x,y)
x <- pbinom(26,51,0.5)
print(x)
x <- qbinom(0.25,51,1/2)
x <- qbinom(0.25,51,1/2))
x <- qbinom(0.25,51,1/2)
print(x)
x
x <- rbinom(8,150,.4)
x
library(caret)
library(LogisticDx)
library(car)
input <- warpbreaks
print(head(input))
print(summary(output))
output <-glm(formula = breaks ~ wool+tension,
data = warpbreaks,
family = poisson)
print(summary(output))
input <- mtcars[,c("am","mpg","hp")]
print(head(input))
result <- aov(mpg~hp*am,data = input)
print(summary(result))
input <- mtcars
result <- aov(mpg~hp+am,data = input)
print(summary(result))
result1 <- aov(mpg~hp*am,data = input)
result2 <- aov(mpg~hp+am,data = input)
print(anova(result1,result2))
rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
rainfall.timeseries <- ts(rainfall,start = c(2012,1),frequency = 12)
print(rainfall.timeseries)
plot(rainfall.timeseries)
rainfall1 <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
rainfall2 <-
c(655,1306.9,1323.4,1172.2,562.2,824,822.4,1265.5,799.6,1105.6,1106.7,1337.8)
combined.rainfall <-  matrix(c(rainfall1,rainfall2),nrow = 12)
rainfall.timeseries <- ts(combined.rainfall,start = c(2012,1),frequency = 12)
print(rainfall.timeseries)
plot(rainfall.timeseries)
plot(rainfall.timeseries, main = "Multiple Time Series")
model<- HoltWinters(rainfall.timeseries,seasonal = "multiplicative",start.periods = 2013,1, frequency=12)
model<- HoltWinters(rainfall.timeseries,seasonal = "multiplicative",start.periods = 2013,1)
plot(model)
summary(model)
model<- HoltWinters(rainfall.timeseries,seasonal = "multiplicative")
model<- HoltWinters(rainfall.timeseries,h=12)
model<- forecast.HoltWinters(rainfall.timeseries,h=12)
model<- forecast.HoltWinters(rainfall.timeseries,alpha=0.7,beta=0.1,gamma=F)
model<-HoltWinters(rainfall.timeseries,alpha=0.7,beta=0.1,gamma=F)
plot(model)
fit2<-HoltWinters(timedata,alpha=0.7,beta=0.1,gamma=F)
plot(fit2)
library(forecast)
library("forecast", lib.loc="~/R/win-library/3.4")
library("party", lib.loc="~/R/win-library/3.4")
library("party", lib.loc="~/R/win-library/3.4")
setwd("D:/case studies/Case_Studies-Edu/Market Mix Modeling- R Version")
data <-read.csv("MMM_ds_1.csv", stringsAsFactors = TRUE, strip.white = TRUE, na.strings = c("NA",""))
str(data)
head(data)
tail(data)
summary(data)
is.na(data) #Checking Missing Values exist or not
data[!complete.cases(data),] # list rows of data that have missing values
data$cmpgn1[is.na(data$cmpgn1)] <- 1 # Recode Missing to 1
data$campgn2[is.na(data$campgn2)] <- 1
fit <- lm(ln_sales ~ cmpgn1 + campgn2 + campgn3 + ln_P_A + ln_P_B + ln_P_C, data=data) # Regression Model
summary(fit) # Prints Output
summary(fit)$r.squared #R-square Value
library(car)
vif(fit) ## Checks Multicolinearlity
(vif(fit)) > 2 # to identify Problematic Variables
library(plyr)
mean1 <- as.data.frame(ddply(data,~Region_cd,summarise,mln_sales=mean(ln_sales)))
mean2 <- as.data.frame(ddply(data,~Region_cd,summarise,mcmpgn1=mean(cmpgn1)))
mean3 <- as.data.frame(ddply(data,~Region_cd,summarise,mcampgn2=mean(campgn2)))
mean4 <- as.data.frame(ddply(data,~Region_cd,summarise,mcampgn3=mean(campgn3)))
mean5 <- as.data.frame(ddply(data,~Region_cd,summarise,mln_P_A=mean(ln_P_A)))
mean6 <- as.data.frame(ddply(data,~Region_cd,summarise,mln_P_B=mean(ln_P_B)))
mean7 <- as.data.frame(ddply(data,~Region_cd,summarise,mln_P_C=mean(ln_P_C)))
library(sqldf)
View(meancnt)
meancnt=data
meancnt$mcmpgn1=mean(meancnt$cmpgn1)
meancnt$mcampgn2=mean(meancnt$campgn2)
meancnt$mcampgn3=mean(meancnt$campgn3)
meancnt$mln_P_A=mean(meancnt$ln_P_A)
meancnt$mln_P_B=mean(meancnt$ln_P_B)
meancnt$mln_P_C=mean(meancnt$ln_P_C)
meancnt$mln_sales= mean(meancnt1$ln_sales)
meancnt1 <- meancnt
meancnt1$pred = 1.05874*exp(0.1356*(meancnt1$cmpgn1-meancnt1$mcmpgn1)+ 0.2432*(meancnt1$campgn2-meancnt1$mcampgn2)+
0.3532*(meancnt1$campgn3-meancnt1$mcampgn3)+ 0.03772*(meancnt1$ln_P_A-meancnt1$mln_P_A)-
0.3618*(meancnt1$ln_P_B-meancnt1$mln_P_B)+ 0.3792*(meancnt1$ln_P_C-meancnt1$mln_P_C)+ meancnt1$mln_sales)
meancnt1$res = meancnt1$pred - meancnt1$sales
meancnt1$abs_res = abs(meancnt1$res)
meancnt1$mape = 100*meancnt1$abs_res/meancnt1$sales
View(meancnt1)
library(caret)
library(LogisticDx)
library(car)
library(rattle)
rattle()
