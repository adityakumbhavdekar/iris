library(twitteR)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(httr)
library(wordcloud)
library(sentiment)
require(devtools)
documents <- c("I am very happy, excited, and optimistic.",
"I am very scared, annoyed, and irritated.",
"Iraq's political crisis entered its second week one step closer to the potential
dissolution of the government, with a call for elections by a vital coalition partner
and a suicide attack that extended the spate of violence that has followed the withdrawal
of U.S. troops.")
classify_emotion(documents,algorithm="bayes",verbose=TRUE)
classify_emotion[,1]
class_emo[,1]
class_emo[,7]
classify_emotion(documents,algorithm="bayes",verbose=TRUE)
classify_emotion[,7]
classify_emotion[,]
classify_emotion[,1]
some_txt <-read.csv("NestleTweetsSample.csv")
class_emo = classify_emotion(some_txt, algorithm="bayes", prior=1.0)
class_emo[,7]
class_emo[,1]
class_emo[,2]
class_emo[,3]
class_emo[,6]
class_emo[,7]
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(some_txt, algorithm="bayes")
head(class_pol)
polarity = class_pol[,4]
head(polarity)
?data.frame()
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
sent_df = data.frame(text=some_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
head(sent_df)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
head(sent_df)
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets", title="classification based on emotion")
ggplot(sent_df1, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="Dark2")+labs(x="polarity categories", y="number of tweets",title="classification based on polarity")
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="Dark2")+labs(x="polarity categories", y="number of tweets",title="classification based on polarity")
Nestle_emos = levels(factor(sent_df$emotion))
n_Nestle_emos = length(Nestle_emos)
Nestle_emos_docs = rep(" ", n_Nestle_emos)
for (i in 1:n_Nestle_emos)
{
tmp = some_txt[emotion == Nestle_emos[i],2]
Nestle_emos_docs[i] = paste(tmp, collapse=" ")
}
Nestle_emos_docs = removeWords(Nestle_emos_docs, stopwords(kind = "en"))
Nestle_emos_docs
Nestle.corpus = Corpus(VectorSource(Nestle_emos_docs))
Nestle.tdm = TermDocumentMatrix(Nestle.corpus)
Nestle.tdm = as.matrix(Nestle.tdm)
colnames(Nestle.tdm) = Nestle_emos
comparison.cloud(Nestle.tdm, colors = brewer.pal(n_Nestle_emos, "Dark2"),scale = c(4,.5), random.order = TRUE, title.size = 1.5)
sent_df = data.frame(text=some_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets", title="classification based on emotion")
ggplot(sent_df)
head(sent_df)
hist(sent_df$emotion)
barplot(sent_df$emotion)
sent_df$emotion
count<-sent_df$emotion
count<-table(sent_df$emotion)
count
barplot(count)
Nestle_emos = levels(factor(sent_df$emotion))
Nestle_emos
n_Nestle_emos = length(Nestle_emos)
n_Nestle_emos
Nestle_emos_docs = rep(" ", n_Nestle_emos)
Nestle_emos_docs
head(some_txt)
head(emotion)
head(Nestle_emos_docs)
for (i in 1:n_Nestle_emos)
{
tmp = some_txt[emotion == Nestle_emos[i],2]
Nestle_emos_docs[i] = paste(tmp, collapse=" ")
}
head(Nestle_emos_docs)
rep(c(1:3))
